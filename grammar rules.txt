<program>  		->  <moduleDeclarations> <otherModules><driverModule><otherModules> 
<moduleDeclarations>->  <moduleDeclaration><moduleDeclarations> | ε 
<moduleDeclaration> ->  DECLARE MODULE ID SEMICOL  
<otherModules> 	->  <module><otherModules>| ε 
<driverModule> 	->  DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> 	 	->  DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef> 
<ret>  	 		->  RETURNS SQBO <output_plist> SQBC SEMICOL | ε 
<input_plist>  	->  ID COLON <dataType> <ipList’> 
<ipList’>		->  COMMA ID COLON <dataType> <ipList’> | ε
<output_plist> 	->  ID COLON <type> <opList’> 
<opList’>		->  COMMA ID COLON <type> <opList’> | ε 
<dataType> 	 	->  INTEGER | REAL | BOOLEAN | ARRAY SQBO <range> SQBC OF <type> 
<type>  	 	->  INTEGER | REAL | BOOLEAN 
<moduleDef>  	->  START <statements> END 
<statements>  	->  <statement> <statements> | ε 
<statement>  	->  <ioStmt> | <simpleStmt> | <declareStmt> | <conditionalStmt> | <iterativeStmt>                     
<ioStmt> 	 	->  GET_VALUE BO ID BC SEMICOL | PRINT BO <ioVar> BC SEMICOL 
<ioVar>			->  <var> | <atoms>
<var>  	 		->  ID <whichId> | NUM | RNUM
<whichId> 	 	->  SQBO <index> SQBC | ε 
<simpleStmt>  	->  <assignmentStmt> | <moduleReuseStmt> 
<assignmentStmt> -> ID <whichStmt> 
<whichStmt>  	->  <lvalueIDStmt> | <lvalueARRStmt> 
<lvalueIDStmt> 	->  ASSIGNOP <expression> SEMICOL 
<lvalueARRStmt>	->  SQBO <index> SQBC ASSIGNOP <expression> SEMICOL 
<index> 	    ->  NUM | ID 
<moduleReuseStmt> -> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL 
<optional>  	->  SQBO <idList> SQBC ASSIGNOP |  ε 
<idList> 	 	->  ID <idList’>  
<idList’>		->  COMMA ID <idList’> | ε
<expression> 	->  <abExpr> <expr'> | <U>
<U>				->  MINUS <unaryExpr> | PLUS <unaryExpr>
<unaryExpr>		->  <var> | BO <arithmeticExpr> BC
<expr'>			->  <logicalOp> <abExpr> <expr'> | ε 
<abExpr> 		->  <arithmeticExpr> <relTerm>
<relTerm>		->  <relationalOp> <arithmeticExpr> | ε
<arithmeticExpr>->  <mulExpr> <arithmeticExpr’>
<arithmeticExpr’> 	-> <addOp> <mulExpr> <arithmeticExpr’> | ε
<addOp> 		-> PLUS | MINUS 
<mulExpr> 		-> <factor> <mulExpr’>
<mulExpr’> 		-> <mulOp> <factor> <mulExpr’> | ε
<mulOp> 	 	-> MUL | DIV 
<factor> 	 	-> BO <expression> BC | <var> | <atoms>
<atoms>			-> TRUE | FALSE
<logicalOp>  	-> AND  | OR 
<relationalOp> 	-> LT | LE | GT | GE | EQ | NE 
<declareStmt> 	-> DECLARE  <idList> COLON <dataType> SEMICOL 
<conditionalStmt> -> SWITCH BO ID BC START <caseStmts> <default> END  
<caseStmts>		-> <caseStmt> <multiCase> 
<multiCase>		-> <caseStmt> <multiCase> | ε
<caseStmt> 	 	-> CASE <value> COLON <statements> BREAK SEMICOL  
<value> 	 	-> NUM | TRUE | FALSE 
<default> 	 	-> DEFAULT COLON <statements> BREAK SEMICOL | ε 
<iterativeStmt> -> FOR BO ID IN <loopRange> BC START <statements> END | WHILE BO <expression> BC START <statements> END 
<loopRange>		-> NUM RANGEOP NUM
<range> 	 	-> <index> RANGEOP <index>